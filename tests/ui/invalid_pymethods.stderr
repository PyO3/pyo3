error: #[classattr] can only have one argument (of type pyo3::Python)
 --> tests/ui/invalid_pymethods.rs:9:35
  |
9 |     fn class_attr_with_args(_foo: i32) {}
  |                                   ^^^

error: `#[classattr]` does not take any arguments
  --> tests/ui/invalid_pymethods.rs:11:5
   |
11 |     #[classattr(foobar)]
   |     ^

error: static method needs #[staticmethod] attribute
  --> tests/ui/invalid_pymethods.rs:14:5
   |
14 |     fn staticmethod_without_attribute() {}
   |     ^^

error: unexpected receiver
  --> tests/ui/invalid_pymethods.rs:17:35
   |
17 |     fn staticmethod_with_receiver(&self) {}
   |                                   ^

error: Expected `&Bound<PyType>` or `Py<PyType>` as the first argument to `#[classmethod]`
  --> tests/ui/invalid_pymethods.rs:20:33
   |
20 |     fn classmethod_with_receiver(&self) {}
   |                                 ^^^^^^^

error: Expected `&Bound<PyType>` or `Py<PyType>` as the first argument to `#[classmethod]`
  --> tests/ui/invalid_pymethods.rs:23:36
   |
23 |     fn classmethod_missing_argument() -> Self {
   |                                    ^^

error: expected receiver for `#[getter]`
  --> tests/ui/invalid_pymethods.rs:41:5
   |
41 |     fn getter_without_receiver() {}
   |     ^^

error: expected receiver for `#[setter]`
  --> tests/ui/invalid_pymethods.rs:47:5
   |
47 |     fn setter_without_receiver() {}
   |     ^^

error: static method needs #[staticmethod] attribute
  --> tests/ui/invalid_pymethods.rs:53:5
   |
53 |     fn text_signature_on_call() {}
   |     ^^

error: `text_signature` not allowed with `getter`
  --> tests/ui/invalid_pymethods.rs:56:12
   |
56 |     #[pyo3(text_signature = "()")]
   |            ^^^^^^^^^^^^^^

error: `text_signature` not allowed with `setter`
  --> tests/ui/invalid_pymethods.rs:60:12
   |
60 |     #[pyo3(text_signature = "()")]
   |            ^^^^^^^^^^^^^^

error: `text_signature` not allowed with `classattr`
  --> tests/ui/invalid_pymethods.rs:64:12
   |
64 |     #[pyo3(text_signature = "()")]
   |            ^^^^^^^^^^^^^^

error: expected a string literal or `None`
  --> tests/ui/invalid_pymethods.rs:67:30
   |
67 |     #[pyo3(text_signature = 1)]
   |                              ^

error: `text_signature` may only be specified once
  --> tests/ui/invalid_pymethods.rs:71:12
   |
71 |     #[pyo3(text_signature = None)]
   |            ^^^^^^^^^^^^^^

error: `signature` not allowed with `getter`
  --> tests/ui/invalid_pymethods.rs:78:12
   |
78 |     #[pyo3(signature = ())]
   |            ^^^^^^^^^

error: `signature` not allowed with `setter`
  --> tests/ui/invalid_pymethods.rs:82:12
   |
82 |     #[pyo3(signature = ())]
   |            ^^^^^^^^^

error: `signature` not allowed with `classattr`
  --> tests/ui/invalid_pymethods.rs:86:12
   |
86 |     #[pyo3(signature = ())]
   |            ^^^^^^^^^

error: `#[new]` may not be combined with `#[classmethod]` `#[staticmethod]`, `#[classattr]`, `#[getter]`, and `#[setter]`
  --> tests/ui/invalid_pymethods.rs:92:7
   |
92 |     #[new]
   |       ^^^

error: `#[new]` does not take any arguments
       = help: did you mean `#[new] #[pyo3(signature = ())]`?
   --> tests/ui/invalid_pymethods.rs:103:7
    |
103 |     #[new(signature = ())]
    |       ^^^

error: `#[new]` does not take any arguments
       = note: this was previously accepted and ignored
   --> tests/ui/invalid_pymethods.rs:109:11
    |
109 |     #[new = ()] // in this form there's no suggestion to move arguments to `#[pyo3()]` attribute
    |           ^

error: `#[classmethod]` does not take any arguments
       = help: did you mean `#[classmethod] #[pyo3(signature = ())]`?
   --> tests/ui/invalid_pymethods.rs:115:7
    |
115 |     #[classmethod(signature = ())]
    |       ^^^^^^^^^^^

error: `#[staticmethod]` does not take any arguments
       = help: did you mean `#[staticmethod] #[pyo3(signature = ())]`?
   --> tests/ui/invalid_pymethods.rs:121:7
    |
121 |     #[staticmethod(signature = ())]
    |       ^^^^^^^^^^^^

error: `#[classattr]` does not take any arguments
       = help: did you mean `#[classattr] #[pyo3(signature = ())]`?
   --> tests/ui/invalid_pymethods.rs:127:7
    |
127 |     #[classattr(signature = ())]
    |       ^^^^^^^^^

error: Python functions cannot have generic type parameters
   --> tests/ui/invalid_pymethods.rs:133:23
    |
133 |     fn generic_method<T>(_value: T) {}
    |                       ^

error: Python functions cannot have `impl Trait` arguments
   --> tests/ui/invalid_pymethods.rs:138:49
    |
138 |     fn impl_trait_method_first_arg(_impl_trait: impl AsRef<PyAny>) {}
    |                                                 ^^^^

error: Python functions cannot have `impl Trait` arguments
   --> tests/ui/invalid_pymethods.rs:140:57
    |
140 |     fn impl_trait_method_second_arg(&self, _impl_trait: impl AsRef<PyAny>) {}
    |                                                         ^^^^

error: `pass_module` cannot be used on Python methods
   --> tests/ui/invalid_pymethods.rs:145:12
    |
145 |     #[pyo3(pass_module)]
    |            ^^^^^^^^^^^

error: Python objects are shared, so 'self' cannot be moved out of the Python interpreter.
       Try `&self`, `&mut self, `slf: PyClassGuard<'_, Self>` or `slf: PyClassGuardMut<'_, Self>`.
   --> tests/ui/invalid_pymethods.rs:151:29
    |
151 |     fn method_self_by_value(self) {}
    |                             ^^^^

error: macros cannot be used as items in `#[pymethods]` impl blocks
       = note: this was previously accepted and ignored
   --> tests/ui/invalid_pymethods.rs:160:5
    |
160 |     macro_invocation!();
    |     ^^^^^^^^^^^^^^^^

error: `#[staticmethod]` may not be combined with `#[classmethod]`
   --> tests/ui/invalid_pymethods.rs:165:7
    |
165 |     #[staticmethod]
    |       ^^^^^^^^^^^^

error: unexpected receiver
   --> tests/ui/invalid_pymethods.rs:170:51
    |
170 |     fn multiple_errors_staticmethod_with_receiver(&self) {}
    |                                                   ^

error: Expected `&Bound<PyType>` or `Py<PyType>` as the first argument to `#[classmethod]`
   --> tests/ui/invalid_pymethods.rs:173:49
    |
173 |     fn multiple_errors_classmethod_with_receiver(&self) {}
    |                                                 ^^^^^^^

error[E0277]: the trait bound `NotATypeObject: From<BoundRef<'_, '_, PyType>>` is not satisfied
  --> tests/ui/invalid_pymethods.rs:33:45
   |
33 |     fn classmethod_wrong_first_argument(_t: NotATypeObject) -> Self {
   |                                             ^^^^^^^^^^^^^^ unsatisfied trait bound
   |
help: the trait `From<BoundRef<'_, '_, PyType>>` is not implemented for `NotATypeObject`
  --> tests/ui/invalid_pymethods.rs:28:1
   |
28 | struct NotATypeObject;
   | ^^^^^^^^^^^^^^^^^^^^^
   = note: required for `BoundRef<'_, '_, PyType>` to implement `Into<NotATypeObject>`
