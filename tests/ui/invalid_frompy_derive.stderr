error: cannot derive FromPyObject for empty structs and variants
 --> tests/ui/invalid_frompy_derive.rs:4:11
  |
4 | struct Foo();
  |           ^^

error: cannot derive FromPyObject for empty structs and variants
 --> tests/ui/invalid_frompy_derive.rs:7:13
  |
7 | struct Foo2 {}
  |             ^^

error: cannot derive FromPyObject for empty enum
  --> tests/ui/invalid_frompy_derive.rs:10:6
   |
10 | enum EmptyEnum {}
   |      ^^^^^^^^^

error: cannot derive FromPyObject for empty structs and variants
  --> tests/ui/invalid_frompy_derive.rs:14:15
   |
14 |     EmptyTuple(),
   |               ^^

error: cannot derive FromPyObject for empty structs and variants
  --> tests/ui/invalid_frompy_derive.rs:20:17
   |
20 |     EmptyStruct {},
   |                 ^^

error: cannot derive FromPyObject for empty structs and variants
  --> tests/ui/invalid_frompy_derive.rs:26:27
   |
26 | struct EmptyTransparentTup();
   |                           ^^

error: cannot derive FromPyObject for empty structs and variants
  --> tests/ui/invalid_frompy_derive.rs:30:31
   |
30 | struct EmptyTransparentStruct {}
   |                               ^^

error: cannot derive FromPyObject for empty structs and variants
  --> tests/ui/invalid_frompy_derive.rs:35:15
   |
35 |     EmptyTuple(),
   |               ^^

error: cannot derive FromPyObject for empty structs and variants
  --> tests/ui/invalid_frompy_derive.rs:42:17
   |
42 |     EmptyStruct {},
   |                 ^^

error: transparent structs and variants can only have 1 field
  --> tests/ui/invalid_frompy_derive.rs:48:35
   |
48 | struct TransparentTupTooManyFields(String, String);
   |                                   ^^^^^^^^^^^^^^^^

error: transparent structs and variants can only have 1 field
  --> tests/ui/invalid_frompy_derive.rs:52:39
   |
52 |   struct TransparentStructTooManyFields {
   |  _______________________________________^
53 | |     foo: String,
54 | |     bar: String,
55 | | }
   | |_^

error: transparent structs and variants can only have 1 field
  --> tests/ui/invalid_frompy_derive.rs:60:15
   |
60 |     EmptyTuple(String, String),
   |               ^^^^^^^^^^^^^^^^

error: transparent structs and variants can only have 1 field
  --> tests/ui/invalid_frompy_derive.rs:67:17
   |
67 |       EmptyStruct {
   |  _________________^
68 | |         foo: String,
69 | |         bar: String,
70 | |     },
   | |_____^

error: expected one of: `attribute`, `item`, `from_py_with`, `default`
  --> tests/ui/invalid_frompy_derive.rs:76:12
   |
76 |     #[pyo3(attr)]
   |            ^^^^

error: expected string literal
  --> tests/ui/invalid_frompy_derive.rs:82:22
   |
82 |     #[pyo3(attribute(1))]
   |                      ^

error: expected at most one argument: `attribute` or `attribute("name")`
  --> tests/ui/invalid_frompy_derive.rs:88:25
   |
88 |     #[pyo3(attribute("a", "b"))]
   |                         ^

error: attribute name cannot be empty
  --> tests/ui/invalid_frompy_derive.rs:94:22
   |
94 |     #[pyo3(attribute(""))]
   |                      ^^

error: unexpected end of input, expected string literal
   --> tests/ui/invalid_frompy_derive.rs:100:22
    |
100 |     #[pyo3(attribute())]
    |                      ^

error: expected at most one argument: `item` or `item(key)`
   --> tests/ui/invalid_frompy_derive.rs:106:20
    |
106 |     #[pyo3(item("a", "b"))]
    |                    ^

error: unexpected end of input, expected literal
   --> tests/ui/invalid_frompy_derive.rs:112:17
    |
112 |     #[pyo3(item())]
    |                 ^

error: only one of `attribute` or `item` can be provided
   --> tests/ui/invalid_frompy_derive.rs:118:5
    |
118 |     #[pyo3(item, attribute)]
    |     ^

error: expected one of: `transparent`, `from_item_all`, `annotation`, `crate`, `rename_all`
   --> tests/ui/invalid_frompy_derive.rs:123:8
    |
123 | #[pyo3(unknown = "should not work")]
    |        ^^^^^^^

error: `annotation` is unsupported for structs
   --> tests/ui/invalid_frompy_derive.rs:129:21
    |
129 | #[pyo3(annotation = "should not work")]
    |                     ^^^^^^^^^^^^^^^^^

error: expected string literal
   --> tests/ui/invalid_frompy_derive.rs:136:25
    |
136 |     #[pyo3(annotation = 1)]
    |                         ^

error: FromPyObject can be derived with at most one lifetime parameter
   --> tests/ui/invalid_frompy_derive.rs:141:22
    |
141 | enum TooManyLifetimes<'a, 'b> {
    |                      ^

error: #[derive(FromPyObject)] is not supported for unions
   --> tests/ui/invalid_frompy_derive.rs:147:1
    |
147 | union Union {
    | ^^^^^

error: cannot derive FromPyObject for empty structs and variants
   --> tests/ui/invalid_frompy_derive.rs:151:10
    |
151 | #[derive(FromPyObject)]
    |          ^^^^^^^^^^^^
    |
    = note: this error originates in the derive macro `FromPyObject` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `=`
   --> tests/ui/invalid_frompy_derive.rs:158:24
    |
158 |     #[pyo3(from_py_with)]
    |                        ^

error: `getter` is not permitted on tuple struct elements.
   --> tests/ui/invalid_frompy_derive.rs:169:27
    |
169 | struct InvalidTupleGetter(#[pyo3(item("foo"))] String);
    |                           ^

error: `transparent` structs may not have a `getter` for the inner field
   --> tests/ui/invalid_frompy_derive.rs:175:5
    |
175 |     field: String,
    |     ^^^^^

error: `transparent` structs may not have a `getter` for the inner field
   --> tests/ui/invalid_frompy_derive.rs:186:5
    |
186 |     field: String,
    |     ^^^^^

error: `from_item_all` may only be provided once
   --> tests/ui/invalid_frompy_derive.rs:190:23
    |
190 | #[pyo3(from_item_all, from_item_all)]
    |                       ^^^^^^^^^^^^^

error: Useless `item` - the struct is already annotated with `from_item_all`
   --> tests/ui/invalid_frompy_derive.rs:196:8
    |
196 | #[pyo3(from_item_all)]
    |        ^^^^^^^^^^^^^

error: The struct is already annotated with `from_item_all`, `attribute` is not allowed
   --> tests/ui/invalid_frompy_derive.rs:203:8
    |
203 | #[pyo3(from_item_all)]
    |        ^^^^^^^^^^^^^

error: The struct is already annotated with `from_item_all`, `attribute` is not allowed
   --> tests/ui/invalid_frompy_derive.rs:210:8
    |
210 | #[pyo3(from_item_all)]
    |        ^^^^^^^^^^^^^

error: cannot derive FromPyObject for structs and variants with only default values
   --> tests/ui/invalid_frompy_derive.rs:217:36
    |
217 |   struct StructWithOnlyDefaultValues {
    |  ____________________________________^
218 | |     #[pyo3(default)]
219 | |     field: String,
220 | | }
    | |_^

error: cannot derive FromPyObject for structs and variants with only default values
   --> tests/ui/invalid_frompy_derive.rs:224:9
    |
224 |       Foo {
    |  _________^
225 | |         #[pyo3(default)]
226 | |         field: String,
227 | |     },
    | |_____^

error: `default` is not permitted on tuple struct elements.
   --> tests/ui/invalid_frompy_derive.rs:231:37
    |
231 | struct NamedTuplesWithDefaultValues(#[pyo3(default)] String);
    |                                     ^

error: `rename_all` may only be provided once
   --> tests/ui/invalid_frompy_derive.rs:234:34
    |
234 | #[pyo3(rename_all = "camelCase", rename_all = "kebab-case")]
    |                                  ^^^^^^^^^^

error: `rename_all` is useless on tuple structs and variants.
   --> tests/ui/invalid_frompy_derive.rs:240:8
    |
240 | #[pyo3(rename_all = "camelCase")]
    |        ^^^^^^^^^^

error: `rename_all` is useless on tuple structs and variants.
   --> tests/ui/invalid_frompy_derive.rs:245:12
    |
245 |     #[pyo3(rename_all = "camelCase")]
    |            ^^^^^^^^^^

error: `rename_all` is not permitted on `transparent` structs and variants
   --> tests/ui/invalid_frompy_derive.rs:250:21
    |
250 | #[pyo3(transparent, rename_all = "camelCase")]
    |                     ^^^^^^^^^^

error: Useless variant `rename_all` - enum is already annotated with `rename_all
   --> tests/ui/invalid_frompy_derive.rs:258:12
    |
258 |     #[pyo3(rename_all = "camelCase")]
    |            ^^^^^^^^^^

error[E0425]: cannot find value `func` in this scope
   --> tests/ui/invalid_frompy_derive.rs:164:27
    |
164 |     #[pyo3(from_py_with = func)]
    |                           ^^^^ not found in this scope
