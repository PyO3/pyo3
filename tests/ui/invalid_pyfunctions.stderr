error: Python functions cannot have generic type parameters
 --> tests/ui/invalid_pyfunctions.rs:5:21
  |
5 | fn generic_function<T>(_value: T) {}
  |                     ^

error: Python functions cannot have `impl Trait` arguments
 --> tests/ui/invalid_pyfunctions.rs:8:37
  |
8 | fn impl_trait_function(_impl_trait: impl AsRef<PyAny>) {}
  |                                     ^^^^

error: wildcard argument names are not supported
  --> tests/ui/invalid_pyfunctions.rs:11:22
   |
11 | fn wildcard_argument(_: i32) {}
   |                      ^

error: destructuring in arguments is not supported
  --> tests/ui/invalid_pyfunctions.rs:14:26
   |
14 | fn destructured_argument((_a, _b): (i32, i32)) {}
   |                          ^^^^^^^^

error: args cannot be optional
  --> tests/ui/invalid_pyfunctions.rs:18:32
   |
18 | fn function_with_optional_args(args: Option<Bound<'_, PyTuple>>) {
   |                                ^^^^

error: kwargs must be Option<_>
  --> tests/ui/invalid_pyfunctions.rs:24:34
   |
24 | fn function_with_required_kwargs(kwargs: Bound<'_, PyDict>) {
   |                                  ^^^^^^

error: expected `&PyModule` or `Py<PyModule>` as first argument with `pass_module`
  --> tests/ui/invalid_pyfunctions.rs:29:37
   |
29 | fn pass_module_but_no_arguments<'py>() {}
   |                                     ^^

error[E0277]: the trait bound `&str: From<BoundRef<'_, '_, pyo3::types::PyModule>>` is not satisfied
  --> tests/ui/invalid_pyfunctions.rs:33:14
   |
31 | #[pyfunction(pass_module)]
   | -------------------------- required by a bound introduced by this call
32 | fn first_argument_not_module<'a, 'py>(
33 |     _string: &str,
   |              ^ the trait `From<BoundRef<'_, '_, pyo3::types::PyModule>>` is not implemented for `&str`
   |
   = help: the following other types implement trait `From<T>`:
             `String` implements `From<&String>`
             `String` implements `From<&mut str>`
             `String` implements `From<&str>`
             `String` implements `From<Box<str>>`
             `String` implements `From<Cow<'_, str>>`
             `String` implements `From<char>`
   = note: required for `BoundRef<'_, '_, pyo3::types::PyModule>` to implement `Into<&str>`
