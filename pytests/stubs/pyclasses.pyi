import typing

class AssertingBaseClass:
    def __new__(cls, /, expected_type: typing.Any) -> None: ...

class ClassWithDecorators:
    def __new__(cls, /) -> None: ...
    @property
    def attr(self, /) -> int: ...
    @attr.setter
    def attr(self, /, value: int) -> None: ...
    @classmethod
    @property
    def cls_attribute(cls, /) -> int: ...
    @classmethod
    def cls_method(cls, /) -> int: ...
    @staticmethod
    def static_method() -> int: ...

class ClassWithoutConstructor: ...

class EmptyClass:
    def __len__(self, /) -> int: ...
    def __new__(cls, /) -> None: ...
    def method(self, /) -> None: ...

class PyClassIter:
    def __new__(cls, /) -> None: ...
    def __next__(self, /) -> int: ...

class PyClassThreadIter:
    def __new__(cls, /) -> None: ...
    def __next__(self, /) -> int: ...
